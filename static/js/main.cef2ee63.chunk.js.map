{"version":3,"sources":["api/Api.js","components/Person/Person.js","components/peopleTable/PeopleTable.js","App.js","index.js"],"names":["peopleList","fetch","then","response","json","Person","_ref","person","selectLine","selectedLine","react_default","a","createElement","Table","Row","className","classNames","active","onClick","id","name","sex","born","died","age","century","mother","father","children","map","child","join","PeopleTable","state","_this","setState","_this2","this","_this$props","props","people","sort","sortable","celled","fixed","Header","HeaderCell","width","Body","components_Person_Person","key","React","Component","App","filterQuery","sortType","sortedPeople","createSelector","lowerCaseQuery","toLowerCase","filteredPeople","filter","includes","b","localeCompare","getData","Promise","all","Object","slicedToArray","_objectSpread","Math","ceil","sortBy","type","queryChange","event","target","value","Fragment","Input","onChange","placeholder","peopleTable_PeopleTable","ReactDOM","render","src_App","test","document","getElementById"],"mappings":"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","file":"static/js/main.cef2ee63.chunk.js","sourcesContent":["const getUrl = url => fetch(url)\n  .then(response => response.json());\n\nconst peopleList\n  = getUrl('https://mate-academy.github.io/react_people-table/api/people.json');\n\nexport default peopleList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Table } from 'semantic-ui-react';\n\nconst Person = ({ person, selectLine, selectedLine }) => (\n  <Table.Row\n    className={classNames({\n      active: selectedLine,\n    })}\n    onClick={() => selectLine(person.id)}\n  >\n    <td>{person.id}</td>\n    <td>{person.name}</td>\n    <td>{person.sex}</td>\n    <td>{person.born}</td>\n    <td>{person.died}</td>\n    <td className={person.age > 65 ? 'ui green inverted table' : null}>\n      {person.age}\n    </td>\n    <td>{person.century}</td>\n    <td>{person.mother}</td>\n    <td>{person.father}</td>\n    <td>{person.children.map(child => child.name).join(', ')}</td>\n  </Table.Row>\n);\n\nPerson.propTypes = {\n  person: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    sex: PropTypes.string.isRequired,\n    born: PropTypes.number.isRequired,\n    died: PropTypes.number.isRequired,\n    mother: PropTypes.string,\n    father: PropTypes.string,\n    age: PropTypes.number.isRequired,\n    century: PropTypes.number.isRequired,\n    children: PropTypes.array,\n  }).isRequired,\n  selectedLine: PropTypes.number.isRequired,\n  selectLine: PropTypes.func.isRequired,\n};\n\nexport default Person;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport Person from '../Person/Person';\n\nclass PeopleTable extends React.Component {\n  state = {\n    selectedLine: null,\n  };\n\n  selectLine = (id) => {\n    this.setState({\n      selectedLine: id,\n    });\n  };\n\n  render() {\n    const { people, sort } = this.props;\n    const { selectedLine } = this.state;\n\n    return (\n      <Table sortable celled fixed>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell width={1} onClick={() => sort('id')}>\n              Id\n            </Table.HeaderCell>\n            <Table.HeaderCell width={2} onClick={() => sort('name')}>\n              Name\n            </Table.HeaderCell>\n            <Table.HeaderCell width={1} onClick={() => sort('sex')}>\n              Sex\n            </Table.HeaderCell>\n            <Table.HeaderCell width={1} onClick={() => sort('bord')}>\n              Born\n            </Table.HeaderCell>\n            <Table.HeaderCell width={1} onClick={() => sort('died')}>\n              Died\n            </Table.HeaderCell>\n            <Table.HeaderCell width={1} onClick={() => sort('age')}>\n              Age\n            </Table.HeaderCell>\n            <Table.HeaderCell width={1} onClick={() => sort('century')}>\n              Century\n            </Table.HeaderCell>\n            <Table.HeaderCell width={2}>Mother</Table.HeaderCell>\n            <Table.HeaderCell width={2}>Father</Table.HeaderCell>\n            <Table.HeaderCell width={3}>Children</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {people.map(person => (\n            <Person\n              key={person.id}\n              person={person}\n              selectedLine={person.id === selectedLine}\n              selectLine={this.selectLine}\n            />\n          ))}\n        </Table.Body>\n      </Table>\n    );\n  }\n}\n\nPeopleTable.propTypes = {\n  people: PropTypes.arrayOf(PropTypes.object).isRequired,\n  sort: PropTypes.func.isRequired,\n};\n\nexport default PeopleTable;\n","import React from 'react';\nimport { createSelector } from 'reselect';\nimport { Input } from 'semantic-ui-react';\nimport peopleList from './api/Api';\nimport PeopleTable from './components/peopleTable/PeopleTable';\n\nclass App extends React.Component {\n  state = {\n    people: [],\n    filterQuery: '',\n    sortType: '',\n  };\n\n  sortedPeople = createSelector(\n    [\n      state => state.people,\n      state => state.filterQuery,\n      state => state.sortType,\n    ],\n    (people, filterQuery, sortType) => {\n      const lowerCaseQuery = filterQuery.toLowerCase();\n      const filteredPeople = people\n        .filter(person => person.name.toLowerCase().includes(lowerCaseQuery)\n          || (person.mother || '').toLowerCase().includes(lowerCaseQuery)\n          || (person.father || '').toLowerCase().includes(lowerCaseQuery));\n\n      switch (sortType) {\n        case 'id':\n          return filteredPeople.sort((a, b) => a.id - b.id);\n        case 'name':\n          return filteredPeople.sort((a, b) => a.name.localeCompare(b.name));\n        case 'sex':\n          return filteredPeople.sort((a, b) => a.sex.localeCompare(b.sex));\n        case 'born':\n          return filteredPeople.sort((a, b) => a.born - b.born);\n        case 'died':\n          return filteredPeople.sort((a, b) => a.died - b.died);\n        case 'age':\n          return filteredPeople.sort((a, b) => a.age - b.age);\n        case 'century':\n          return filteredPeople.sort((a, b) => a.century - b.century);\n        default:\n          return filteredPeople;\n      }\n    }\n  );\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData = () => {\n    Promise.all([peopleList]).then(([people]) => {\n      let id = 0;\n\n      this.setState({\n        people: people.map((person) => {\n          id += 1;\n\n          return ({\n            id,\n            ...person,\n            age: person.died - person.born,\n            century: Math.ceil(person.died / 100),\n            children: people\n              .filter(child => (child.mother === person.name)\n                || (child.father === person.name)),\n          });\n        }),\n      });\n    });\n  }\n\n  sortBy = (type) => {\n    this.setState({\n      sortType: type,\n    });\n  };\n\n  queryChange = (event) => {\n    this.setState({\n      filterQuery: event.target.value,\n    });\n  };\n\n  render() {\n    const people = this.sortedPeople(this.state);\n    const { filterQuery } = this.state;\n\n    return (\n      <>\n        <Input\n          type=\"text\"\n          value={filterQuery}\n          onChange={this.queryChange}\n          placeholder=\"Enter name\"\n        />\n        <PeopleTable people={people} sort={this.sortBy} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App test={123} />, document.getElementById('root'));\n"],"sourceRoot":""}